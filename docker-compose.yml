version: '3.8'

services:
  # MongoDB 数据库服务
  mongodb:
    image: mongo:6.0
    container_name: first-moments-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: first_moments
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - first-moments-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis 缓存服务
  redis:
    image: redis:7.0-alpine
    container_name: first-moments-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - first-moments-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MinIO 对象存储服务
  minio:
    image: minio/minio:latest
    container_name: first-moments-minio
    restart: unless-stopped
    ports:
      - "9000:9000"  # API端口
      - "9001:9001"  # Console端口
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: first-moments-images,first-moments-videos,first-moments-documents
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
      - ./docker/minio/policy:/policy
    networks:
      - first-moments-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # MinIO Client - 用于初始化bucket和策略
  minio-client:
    image: minio/mc:latest
    container_name: first-moments-minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      mc mb myminio/first-moments-images --ignore-existing;
      mc mb myminio/first-moments-videos --ignore-existing;
      mc mb myminio/first-moments-documents --ignore-existing;
      mc anonymous set public myminio/first-moments-images;
      mc anonymous set public myminio/first-moments-videos;
      mc anonymous set private myminio/first-moments-documents;
      echo 'MinIO buckets created successfully';
      "
    networks:
      - first-moments-network

  # MongoDB Express - 数据库管理界面（可选）
  mongo-express:
    image: mongo-express:latest
    container_name: first-moments-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - first-moments-network

  # Redis Commander - Redis管理界面（可选）
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: first-moments-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - first-moments-network

# 数据卷定义
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

# 网络定义
networks:
  first-moments-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16